name: FCE

on:
  workflow_dispatch:
    inputs:
      get:
        required: true
      url:
        required: true
      track:
        required: false

env:
  GET: ${{ github.event.inputs.get }}
  URL: ${{ github.event.inputs.url }}
  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  FCE:
    name: ${{ github.event.inputs.track }} 
    runs-on: ubuntu-latest

    steps:

      - name: validate
        run: |
          [[ "$GET" == "settings_apk" || "$GET" == "boot_img" || "$GET" == "init_boot_img" ]] || { echo "Only 'settings_apk', 'boot_img', or 'init_boot_img' are allowed."; exit 1; }
          curl --head --fail "$URL" && [[ "$URL" == *.zip ]] || { echo "Invalid or inaccessible URL."; exit 1; }
          NAME=${GET}_$(basename "$URL")
          status_code=$(curl -o /dev/null -s -w "%{http_code}" -L "https://github.com/${GITHUB_REPOSITORY}/releases/download/${GET}/${NAME}")
          if [[ "$status_code" == 200 || "$status_code" == 302 ]]; then
            echo "${NAME} existing"
            exit 1
          fi
          echo "NAME=$NAME" >> $GITHUB_ENV
        
      - uses: actions/checkout@v4

      - name: cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/lib/python3*/site-packages
            tools
          key: ${{ runner.os }}-cache-${{ hashFiles('**/tools/*') }}
          restore-keys: |
            ${{ runner.os }}-cache-

      - name: install
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          if [ ! -d tools ]; then
            sudo apt-get update && sudo apt-get install -y python3-pip p7zip-full aria2
            git clone https://github.com/vm03/payload_dumper.git tools
            aria2c -o erofs-utils.zip https://github.com/sekaiacg/erofs-utils/releases/download/v1.8.1-240810/erofs-utils-v1.8.1-gddbed144-Linux_x86_64-2408101422.zip
            7z x erofs-utils.zip -otools
            pip install -r ./tools/requirements.txt
            rm -f erofs-utils.zip
          fi

      - name: download
        run: |
          aria2c -x 7 -s 7 -k 1M --continue --max-tries=0 --log=LOG --out='exrom.zip' "$URL"
          7z x exrom.zip -o./
          rm exrom.zip

      - name: boot_img
        if: ${{ env.GET == 'boot_img' }}
        run: |
          if [ ! -f "boot.img" ]; then
            ./tools/payload_dumper.py --out . --images boot payload.bin
          fi
          7z a "${NAME}" boot.img

      - name: init_boot_img
        if: ${{ env.GET == 'init_boot_img' }}
        run: |
          if [ ! -f "init_boot.img" ]; then
            ./tools/payload_dumper.py --out . --images init_boot payload.bin
          fi
          7z a "${NAME}" init_boot.img

      - name: settings_apk
        if: ${{ env.GET == 'settings_apk' }}
        run: |
          ./tools/payload_dumper.py --out . --images system_ext payload.bin
          sudo mkdir -p /mnt/priv-app/Settings && sudo chmod -R 777 /mnt && 7z x system_ext.img -o/mnt -y && sudo cp /mnt/priv-app/Settings/Settings.apk . && echo "method 1 used" || (./tools/extract.erofs -i system_ext.img -x -o . && cp system_ext/priv-app/Settings/Settings.apk . && echo "method 2 used" || (echo "both methods failed" && exit 1))
          7z a "${NAME}" Settings.apk

      - name: upload
        run: |
          # if ! gh release view "$GET"; then
            # gh release create "$GET" --title "$GET"
          # fi
          gh release upload "$GET" "${NAME}" --clobber
